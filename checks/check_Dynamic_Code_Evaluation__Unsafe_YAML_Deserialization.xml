<?xml version="1.0" encoding="UTF-8"?>
<check status="enabled">
    <name><![CDATA[Dynamic Code Evaluation: Unsafe YAML Deserialization]]></name>
    <description><![CDATA[Deserializing user-controlled YAML streams might enable attackers to execute arbitrary code on the server, abuse application logic, and/or lead to denial of service.]]></description>
    <explanation><![CDATA[YAML serialization libraries, which convert object graphs into YAML formatted data may include the necessary metadata to reconstruct the objects back from the YAML stream. If attackers can specify the classes of the objects to be reconstructed and are able to force the application to run arbitrary setters with user-controlled data, they may be able to execute arbitrary code during the deserialization of the YAML stream.

Example 1: The following example deserializes an untrusted YAML string using an insecure YAML loader.

KF_CODE_EXAMPLE
import yaml
yamlString = getYamlFromUser()
yaml.load(yamlString)]]></explanation>
    <severity>Medium</severity>
    <recommendations>Use safe methods: yaml.safe_load and yaml.safe_load_all</recommendations>
    <links><![CDATA[[1] Standards Mapping - Common Weakness Enumeration
CWE ID 502
[2] Standards Mapping - Common Weakness Enumeration Top 25 2019
[23] CWE ID 502
[3] Standards Mapping - Common Weakness Enumeration Top 25 2020
[21] CWE ID 502
[4] Standards Mapping - DISA Control Correlation Identifier Version 2
CCI-001764, CCI-001774, CCI-002754
[5] Standards Mapping - FIPS200
SI
[6] Standards Mapping - General Data Protection Regulation (GDPR)
Indirect Access to Sensitive Data
[7] Standards Mapping - NIST Special Publication 800-53 Revision 4
SI-10 Information Input Validation (P1)
[8] Standards Mapping - NIST Special Publication 800-53 Revision 5
SI-10 Information Input Validation
[9] Standards Mapping - OWASP Top 10 2004
A6 Injection Flaws
[10] Standards Mapping - OWASP Top 10 2007
A2 Injection Flaws
[11] Standards Mapping - OWASP Top 10 2010
A1 Injection
[12] Standards Mapping - OWASP Top 10 2013
A1 Injection
[13] Standards Mapping - OWASP Top 10 2017
A8 Insecure Deserialization
[14] Standards Mapping - OWASP Mobile 2014
M7 Client Side Injection
[15] Standards Mapping - OWASP Application Security Verification Standard 4.0
1.5.2 Input and Output Architectural Requirements, 5.5.1 Deserialization Prevention Requirements, 5.5.3 Deserialization Prevention Requirements
[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1
Requirement 6.5.6
[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2
Requirement 6.3.1.1, Requirement 6.5.2
[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0
Requirement 6.5.1
[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0
Requirement 6.5.1
[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1
Requirement 6.5.1
[21] Standards Mapping - Payment Card Industry Data Security Standard Version 3.2
Requirement 6.5.1
[22] Standards Mapping - Payment Card Industry Data Security Standard Version 3.2.1
Requirement 6.5.1
[23] Standards Mapping - Payment Card Industry Software Security Framework 1.0
Control Objective 4.2 - Critical Asset Protection
[24] Standards Mapping - SANS Top 25 2009
Insecure Interaction - CWE ID 116
[25] Standards Mapping - Security Technical Implementation Guide Version 3.1
APP3510 CAT I, APP3570 CAT I
[26] Standards Mapping - Security Technical Implementation Guide Version 3.4
APP3510 CAT I, APP3570 CAT I
[27] Standards Mapping - Security Technical Implementation Guide Version 3.5
APP3510 CAT I, APP3570 CAT I
[28] Standards Mapping - Security Technical Implementation Guide Version 3.6
APP3510 CAT I, APP3570 CAT I
[29] Standards Mapping - Security Technical Implementation Guide Version 3.7
APP3510 CAT I, APP3570 CAT I
[30] Standards Mapping - Security Technical Implementation Guide Version 3.9
APP3510 CAT I, APP3570 CAT I
[31] Standards Mapping - Security Technical Implementation Guide Version 3.10
APP3510 CAT I, APP3570 CAT I
[32] Standards Mapping - Security Technical Implementation Guide Version 4.1
APSC-DV-001480 CAT II, APSC-DV-001490 CAT II, APSC-DV-002560 CAT I
[33] Standards Mapping - Security Technical Implementation Guide Version 4.2
APSC-DV-001480 CAT II, APSC-DV-001490 CAT II, APSC-DV-002560 CAT I
[34] Standards Mapping - Security Technical Implementation Guide Version 4.3
APSC-DV-001480 CAT II, APSC-DV-001490 CAT II, APSC-DV-002560 CAT I
[35] Standards Mapping - Security Technical Implementation Guide Version 4.4
APSC-DV-001480 CAT II, APSC-DV-001490 CAT II, APSC-DV-002560 CAT I
[36] Standards Mapping - Security Technical Implementation Guide Version 4.5
APSC-DV-001480 CAT II, APSC-DV-001490 CAT II, APSC-DV-002560 CAT I
[37] Standards Mapping - Security Technical Implementation Guide Version 4.6
APSC-DV-001480 CAT II, APSC-DV-001490 CAT II, APSC-DV-002560 CAT I
[38] Standards Mapping - Security Technical Implementation Guide Version 4.7
APSC-DV-001480 CAT II, APSC-DV-001490 CAT II, APSC-DV-002560 CAT I
[39] Standards Mapping - Security Technical Implementation Guide Version 4.8
APSC-DV-001480 CAT II, APSC-DV-001490 CAT II, APSC-DV-002560 CAT I
[40] Standards Mapping - Security Technical Implementation Guide Version 4.9
APSC-DV-001480 CAT II, APSC-DV-001490 CAT II, APSC-DV-002560 CAT I
[41] Standards Mapping - Security Technical Implementation Guide Version 4.10
APSC-DV-001480 CAT II, APSC-DV-001490 CAT II, APSC-DV-002560 CAT I
[42] Standards Mapping - Security Technical Implementation Guide Version 4.11
APSC-DV-001480 CAT II, APSC-DV-001490 CAT II, APSC-DV-002560 CAT I
[43] Standards Mapping - Security Technical Implementation Guide Version 5.1
APSC-DV-001480 CAT II, APSC-DV-001490 CAT II, APSC-DV-002560 CAT I
[44] Standards Mapping - Web Application Security Consortium Version 2.00
Improper Input Handling (WASC-20)]]></links>
    <patterns>
        <pattern_simple>
            <function_call>
                <name operator="eq">yaml.load</name>
            </function_call>
        </pattern_simple>
        <pattern_simple>
            <function_call>
                <name operator="eq">yaml.load_all</name>
            </function_call>
        </pattern_simple>
    </patterns>
</check>
